% By: Nicolas Martinez Martinez - 2025
%Pre processing pipeline for brainocker
%sub-0cGdk9

% brainlife.io App for Brainstorm MEEG data analysis
  
disp('0) My script has started');
  
%% Key paths
% Directory to store brainstorm database
BrainstormDbDir = '/tmp/brainstorm_db'; 
bst_set('BrainstormDbDir', '/tmp/brainstorm_db');
ReportsDir = '/tmp/brainstorm_db/out_dir';
DataDir    = '/tmp/brainstorm_db/out_data';
%% Parameters
% % Path to the data
   
% Load Brainlife configuration file: config.json
config_data = jsondecode(fileread('/mnt/tfmufv2025/config.json'));
sFilesMEG = fullfile(config_data.fif);
 
ProtocolName = 'Protocol01'; % Needs to be a valid folder name (no spaces, no weird characters, etc)
SubjectName = 'Subject01';

% NOTCH FILTER
% Frequencies to filter with the noth (e.g. power line 60Hz and harmonics)
freqs_notch = 50:50:200;
highpass = 0.3;

% PSD
% Window length and overlap for PSD Welch method
% win_length = 1; % seconds
% win_overlap = 0; % percentage


%% START BRAINSTORM
disp('== Start Brainstorm defaults');

% Set Brainstorm database directory
bst_set('BrainstormDbDir', BrainstormDbDir);
brainstorm('SetActiveProtocol', ProtocolName);
% Reset colormaps
bst_colormaps('RestoreDefaults', 'meg');

%%%%%%%%
% See Tutorial 1
disp(['- BrainstormDbDir:', bst_get('BrainstormDbDir')]);
disp(['- BrainstormUserDir:', bst_get('BrainstormUserDir')]); % HOME/.brainstom (operating system)
disp(['- HOME env:', getenv('HOME')]);
disp(['- HOME java:', char(java.lang.System.getProperty('user.home'))]);
%%%%%%%%


%% CREATE PROTOCOL 
disp('== Create protocol');

% Create new protocol
UseDefaultAnat = 1; 
UseDefaultChannel = 0;
gui_brainstorm('CreateProtocol', ProtocolName, UseDefaultAnat, UseDefaultChannel);

disp('- New protocol created');

%% ==== 1) Import MEG files and RESAMPLE =======================================
disp('== 1) Import MEG file');

sFiles0 = [];
% Start a new report
bst_report('Start');

% Process: Create link to raw file    
sFiles = bst_process('CallProcess', 'process_import_data_raw', ...
    sFiles0, [], ...
    'subjectname', SubjectName, ...
    'datafile', {sFilesMEG, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign', 1);
 
% %Resample
% Process: Resample: 500Hz
sFilesRS = bst_process('CallProcess', 'process_resample', sFiles, [], ...
    'freq',     500, ...
    'read_all', 0);

disp('== First process completed :)');
%% ==== 2) PSD on sensors (before filtering) and snapshot ======================
 
disp('== 2) PSD on sensors');
sFilesPSD1 = bst_process('CallProcess', 'process_psd', sFilesRS, [], ...
    'timewindow',  [], ...
    'win_length',  1, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'sensortypes', 'MEG, EEG', ...
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));
%SNAPSHOT
sFilessns = bst_process('CallProcess', 'process_snapshot', sFilesPSD1, [], ...
    'type',           'spectrum', ...  % Frequency spectrum
    'modality',       1, ...  % MEG (All)
    'orient',         1, ...  % left
    'time',           0, ...
    'contact_time',   [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold',      30, ...
    'surfsmooth',     30, ...
    'freq',           0, ...
    'rowname',        '', ...
    'mni',            [0, 0, 0], ...
    'Comment',        '');

disp('== Second process completed :)');
%% ==== 3)  Notch filter, PSD and snapshot =====================
 
disp('== 3) Notch');

% Process: Notch filter: 50Hz 100Hz 150Hz 250Hz 
sFilesnotch1 = bst_process('CallProcess', 'process_notch', sFilesRS, [], ...
    'freqlist', freqs_notch , ...
    'cutoffW',   1, ...
    'useold',    0, ...
    'overwrite', 0);
  
% Process: Power spectrum density (Welch)
sFilesnotchPSD1 = bst_process('CallProcess', 'process_psd', sFilesnotch1, [], ...
    'timewindow',  [], ...
    'win_length',  1, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'sensortypes', 'MEG', ...
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));
 
% %SNAPSHOT NOTCH PSD 
% Process: Snapshot: 
sFiles = bst_process('CallProcess', 'process_snapshot', sFilesnotchPSD1, [], ...
    'type',           'spectrum', ...  % Frequency spectrum
    'modality',       1, ...  % MEG (All)
    'orient',         1, ...  % left
    'time',           0, ...
    'contact_time',   [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold',      30, ...
    'surfsmooth',     30, ...
    'freq',           0, ...
    'rowname',        '', ...
    'mni',            [0, 0, 0], ...
    'Comment',        '');

 
 disp('== Third process completed :)');
 
 %% %% ==== 4)  High pass filter , PSD and snapshot =====================
 
disp('== 4) High pass filter');


sFilesHP = bst_process('CallProcess', 'process_bandpass', ...
    sFiles, [], ...
    'highpass', highpass, ...
    'lowpass', lowpass, ...
    'mirror', 1, ...
    'sensortypes', 'MEG, EEG', ...
    'read_all', 0);

% Process: Power spectrum density (Welch)
sFilesHPPSD1 = bst_process('CallProcess', 'process_psd', sFilesHP, [], ...
    'timewindow',  [], ...
    'win_length',  1, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'sensortypes', 'MEG', ...
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));
 
% %SNAPSHOT NOTCH PSD 
% Process: Snapshot: 
sFiles = bst_process('CallProcess', 'process_snapshot', sFilesHPPSD1, [], ...
    'type',           'spectrum', ...  % Frequency spectrum
    'modality',       1, ...  % MEG (All)
    'orient',         1, ...  % left
    'time',           0, ...
    'contact_time',   [0, 0.1], ...
    'contact_nimage', 12, ...
    'threshold',      30, ...
    'surfsmooth',     30, ...
    'freq',           0, ...
    'rowname',        '', ...
    'mni',            [0, 0, 0], ...
    'Comment',        '');

 
 disp('== Fourth process completed :)');
 
%% Save Report and delete protocol

% Save report
disp('== Save report');
ReportFile = bst_report('Save', []);
bst_report('Export', ReportFile, ReportsDir);

% Copy brainstorm_db data
copyfile([BrainstormDbDir,'/',ProtocolName], DataDir);

% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
disp('== Delete protocol');
 

%% DONE
disp('** Done!');
     
